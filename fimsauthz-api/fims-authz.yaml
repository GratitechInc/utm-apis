openapi: 3.0.0
info:
  version: 1.1.0
  title: Flight Information Management System (FIMS) Authorization (AZ) Server
  description: >

    The FIMS AZ service provides authorization services for FIMS stakeholders
    within UTM.  It is written to the UAS Service Supplier Framework (UFAA)
    for Authentication and Authorization" at `https://utm.arc.nasa.gov/docs/2019-UTM_Framework-NASA-TM220364.pdf`.

    The FIMS Authorization Server facilitates the RFC-6749 Client
    Credentials flow for clients to USS Network resource servers.
    Typically these resource servers include other USSs and discovery systems.

    # Authentication using Message Signing

    Concepts are detailed in the UFAA.
    Implementation notes are in the README in this folder at `https://github.com/nasa/utm-apis/blob/master/fimsauthz-api/README.md`.

    This authentication method is designed to provide
    message integrity, non-repudiation, and message authentication.
    Clients authenticate by providing a JWS signature of the HTTP request body's
    `x-www-form-urlencoded` data. The signature is provided in the
    `x-utm-message-signature` HTTP header of the HTTP Request.
    As specified in the UFAA, the signature is performed using the private key
    associated with the certificate specified by `x5u` in the JOSE Header.

    # Roles

    Roles and their scopes are in this folder at `https://github.com/nasa/utm-apis/blob/master/fimsauthz-api/nup-roles.yaml`

paths:
  /token:
    post:
      tags:
        - Token Endpoint
      summary: Request an access token.
      description: |
        The primary endpoint for this authorization server.  Used to request an access token
        suitable for authorizing data exchanges within the USS Network.

        Implemented per https://tools.ietf.org/html/rfc6749#section-3.2 .

      security:
        - fims-jws: []

      parameters:
        - in: header
          name: x-utm-message-signature
          schema:
            type: string
          required: true
          description: >-
            The `x-utm-message-signature` HTTP header is an encode string representation of the 
            `#/components/schemas/xUtmMessageSignatureJws` with the payload field eliminated. 

            Refer to UFAA's section 5.12.5. 

      requestBody:
        description: Data supplied by the client for a token request.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - grant_type
                - client_id
                - scope
                - audience
                - current_timestamp
              additionalProperties: false
              properties:
                grant_type:
                  type: string
                  description: Type of grant. Must be 'client_credentials'.
                  enum:
                    - client_credentials
                client_id:
                  description: The client_id (uss_name) of the requesting USS.
                  type: string
                  example: "uss12345.co"
                scope:
                  description: |
                    The requested scope(s), a list of space-delimited,
                    case-sensitive names. Same as in RFC 6749.

                    As of Version 1.0.2 of this specification allows a pair of scope for this case only:
                    [dss.read.identification_service_areas, rid.read.enhanced_details]
                  type: string
                  example: "dss.read.identification_service_areas"
                audience:
                  description: |
                    The hostname of the server with which the resulting access token 
                    will be used. 

                    If valid, this resource value will be included in the access token 
                    as an aud claim.

                    Note the format of this field is a single hostname.  This authorization 
                    server does not produce of multi-audience tokens.

                    See https://tools.ietf.org/html/rfc7519#section-4.1.3 for more info 
                    on how the aud claim is to be used.
                  type: string
                  format: hostname
                  maxLength: 2000
                  example: "the-dss.co"
                current_timestamp:
                  description: |
                    A timestamp of the current time generated by the client at request
                    generation time. UTC only. UTM Commons format with millisecond precision.

                    May be used by the authorization server to validate the request.
                  type: string
                  format: date-time
                  example: "2020-06-19T13:37:52.562Z"
                salt:
                  description: |

                    [NOT IMPLEMENTED.  FOR DISCUSSION PURPOSES ONLY.]

                    Additional length and randomization added to the request since this
                    HTTP body is also JWS body.

                    NOTE1: should be made to align with UTM commons definition of a
                    UUID (i.e. v4 and therefore matching regex).

                    NOTE2: This is a suggested/experimental field at the moment. Needs
                    discussion.

                    NOTE3: If a duplicate salt value is used in multiple requests, FIMS AZ may
                    reject duplicated salt requests beyond the first.

                  type: string
                  format: uuid
                  example: "1161281b-accb-4288-943a-d9be3fcfced4"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpTokenResponse"

        "400":
          description: >-
            - Request did not conform to the API specification or failed validation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"

        "401":
          description: >-
            - Request used invalid or incorrect credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"

        "429":
          description: >-
            - [NOT IMPLEMENTED] Client has been timed-out for making too many requests.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpErrorResponse"

  /.well-known/oauth-authorization-server:
    get:
      tags:
        - /.well-known/
      summary: Provides metadata related to use of this authorization server
      description: |
        Per RFC8414, this endpoint provides metadata related to use of this authorization
        server. See https://tools.ietf.org/html/rfc8414#section-3 for more details.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"

  /.well-known/jwks.json:
    get:
      tags:
        - /.well-known/
      summary: Serves the public JWKS of the authorization server
      description: |
        This endpoint serves the signing key(s) the client uses to validate
        signatures from the authorization server.

        The JWK Set MAY also contain the server's encryption key or keys,
        which are used by clients to encrypt requests to the server.

        When both signing and encryption keys are made available, a "use"
        (public key use) parameter value is REQUIRED for all keys in the
        referenced JWK Set to indicate each key's intended usage.

        Refer to RFC7517 - https://tools.ietf.org/html/rfc7517
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JsonWebKeySet"

servers:
  - url: "https://ansp-authority-baseurl/oauth/{info.version}"

components:
  securitySchemes:
    fims-jws:
      description: |
        FIMS-Authz uses a JWS-based approach to authentication.

        USS clients are vetted/qualified in advance and provide an owned DNS
        name that serves as their primary identifer.  That DNS name is then
        included in a certificate (as a subject alternative name) that the
        client procures from an approved CA.  The private key related to that
        public certificate is then used to create a JWS by signing the HTTP
        body of the token request.

        The JWS is provided in a "Detached Content" manner, with just
        the JWS header and JWS signature fields provided in the HTTP
        header.  The HTTP body can be used to reconstruct a full JWS.

        See RFC7515 for more information on the detached content approach:
        https://tools.ietf.org/html/rfc7515#appendix-F

        Details are provided in:
        https://utm.arc.nasa.gov/docs/2019-UTM_Framework-NASA-TM220364.pdf

      type: apiKey
      in: header
      name: x-utm-message-signature

  schemas:
    HttpTokenResponse:
      type: object
      additionalProperties: false
      properties:
        access_token:
          type: string
          format: JwsCompactSerialization
          description: see definitions/JwsCompactSerialization in this spec
        scope:
          type: string
          description: |
            The granted scope(s), a list of space-delimited,
            case-sensitive names. Same as in RFC 6749.

            Version 1.0.2 of this specification allows a pair of scope for this case only:
            [dss.read.identification_service_areas, rid.read.enhanced_details]
        token_type:
          type: string
          enum:
            - bearer
        expires_in:
          type: number
          format: integer
          description: see definitions/JwtClaimsSet.exp property in this spec
        sub:
          type: string
          description: see definitions/JwtClaimsSet in this spec
        jti:
          type: string
          format: uuid
          description: see definitions/JwtClaimsSet in this spec
        iss:
          type: string
          description: see definitions/JwtClaimsSet in this spec
        nbf:
          type: number
          description: see definitions/JwtClaimsSet in this spec
      example:
        access_token: tokenstring
        token_type: bearer
        expires_in: 3599
        scope: utm.nasa.gov_write.operation
        sub: nuss1.testing.nasa.gov
        nbf: 1509470774
        iss: fims.arc.nasa.gov/fimsAuthServer
        jti: 4d4c1a63-0959-48cc-885a-3648fd582db7
    xUtmMessageSignatureJws:
      description: >-
        A JWS constructed by the client for requesting a token from FIMS-AZ.
        The client shall construct a JWS object with the header as specified by the 
        `#/components/schemas/xUtmMessageSignatureJoseHeader`, and the payload 
        as a character string of the HTTP body. The client shall sign the JWS 
        with their private key.
      type: object
      additionalProperties: false
      properties:
        header:
          $ref: "#/components/schemas/xUtmMessageSignatureJoseHeader"
        payload:
          type: object
          description: >-
            The payload of the JWS will be the same character string as the HTTP body.
        signature:
          type: string
          description: >-
            The signature is calculated on the payload based on the information in the header.
    xUtmMessageSignatureJoseHeader:
      description: >-
        The JOSE (JSON Object Signing and Encryption) header of the JWS used in Message Signing.
        Refer to UFAA's section 5.12.1 for additional information.
      type: object
      properties:
        alg:
          type: string
          description: >-
            The algorithm used to sign the JWS, which is required to be a 
            registered JSON Web Algorithm (JWA). See RFC 7518 for details on JWA.
          enum:
            - RS256
        typ:
          type: string
          description: >-
            The type is used by JWS applications to declare the media type of 
            this complete JWS. In this case, it must be “JOSE” per ​RFC 7515​.
          enum:
            - JOSE
        x5u:
          type: string
          description: >-
            The "x5u" (X.509 URL) Header Parameter is a URI [​RFC 3986]​ that 
            refers to a resource for the X.509 public key certificate or 
            certificate chain [​RFC 5280​] corresponding to the key used to 
            digitally sign the JWS.
          example: "https://example.com/.well-known/uas-traffic-management/public.der"
        kid:
          type: string
          description: >-
            The Key ID of the JWK used to sign. Note that the jku reference 
            will provide a set of keys with unique key identifiers. Those 
            identifiers will be searched to match against this kid.
    JsonWebToken:
      description: >-
        The token provided by the FIMS Authorization Server is a JWS
        representing a JWT.  The token is actually a JWS Compact Serialization
        string as described in RFC 7515.  For clarity of documentation, we
        represent the pre-serialized components here as a JSON schema.
      type: object
      additionalProperties: false
      properties:
        header:
          $ref: "#/components/schemas/JwtHeader"
        payload:
          $ref: "#/components/schemas/JwtClaimsSet"
        signature:
          type: string
          description: See RFC 7515 for details.
    JwtHeader:
      description: >-
        The header of the JWT Bearer Token returned by FIMS-AZ.
      type: object
      properties:
        alg:
          type: string
          enum:
            - RSA
        typ:
          type: string
          enum:
            - JWT
          description: >-
            The FIMS Authorization Server only support 'JWT' (JSON Web Token) as
            the algorithm type.
    JwtClaimsSet:
      type: object
      required:
        - iss
        - sub
        - exp
        - nbf
        - iat
        - jti
        - scope
        - aud
      additionalProperties: false
      description: Claims included within JWT Bearer Token returned by FIMS-AZ.
      properties:
        iss:
          type: string
          format: URL
          description: >-
            The "iss" (issuer) claim identifies the principal that issued the
            JWT. The URL of the FIMS Authorization Server.
        sub:
          type: string
          description: >-
            The "sub" (suv4-draft identifies the principal that is the subject
            of the JWT.
        exp:
          type: integer
          format: unix-time
          description: >-
            The "exp" (expiration time) claim identifies the expiration time on
            or after which the JWT MUST NOT be accepted for processing.  The
            processing of the "exp" claim requires that the current date/time
            MUST be before the expiration date/time listed in the "exp" claim.
        nbf:
          type: integer
          format: unix-time
          description: >-
            The "nbf" (not before) claim identifies the time before which the
            JWT MUST NOT be accepted for processing.  The processing of the
            "nbf" claim requires that the current date/time MUST be after or
            equal to the not-before date/time listed in the "nbf" claim.
        iat:
          type: integer
          format: unix-time
          description: >-
            The "iat" (issued at) claim identifies the time at which the JWT was
            issued.  This claim can be used to determine the age of the JWT.
        jti:
          type: string
          format: uuid
          description: >-
            The "jti" (JWT ID) claim provides a unique identifier for the JWT.
            For this server, this is satisfied by the use of a UUID.
        scope:
          description: |
            The granted scope(s), a list of space-delimited, case-sensitive names. 

            Version 1.0.2 of this specification allows a pair of scope for this case only:
            [dss.read.identification_service_areas, rid.read.enhanced_details]
          type: string
          example: "scope1 scope2"
        aud:
          description: |
            The "aud" (audience) claim identifies the recipients that the JWT is
            intended for.  Each server intended to process the JWT MUST
            identify itself with a value in the audience claim.  If the server
            processing the claim does not identify itself with a value in the
            "aud" claim when this claim is present, then the JWT MUST be
            rejected.  "aud" will contain exactly one identifier of 
            the intended recipient system.
          type: string
          format: hostname
          example: "the-dss.co"
        authorities:
          description: An array of all authorities that the client is associated with.
          type: array
          items:
            type: string
            example: "ASTM_USS_BASIC"
          minItems: 1
        client_id:
          description: The client_id (uss_name) of the requesting USS.
          type: string
          example: "uss.example.xyz"
    Metadata:
      type: object
      description: Information provided at the `/.well-known/oauth-authorization-server` endpoint.
      required:
        - issuer
        - token_endpoint
        - jwks_uri
        - scopes_supported
        - response_types_supported
        - grant_types_supported
        - token_endpoint_auth_methods_supported
        - token_endpoint_auth_signing_alg_values_supported
        - service_documentation
        - jwt_claims
        - signed_metadata
      additionalProperties: false
      properties:
        issuer:
          type: string
          format: url
          description: >-
            The authorization server's issuer identifier, which is a URL that
            uses the "https" scheme and has no query or fragment components.
            This is the location where ".well-known" RFC 8615 resources
            containing information about the authorization server are
            published.  Using these well-known resources is described in Section
            3.  The issuer identifier is used to prevent authorization server
            mix-up attacks, as described in "OAuth 2.0 Mix-Up Mitigation".
        token_endpoint:
          type: string
          format: url
          description: >-
            URL of the authorization server's token endpoint [RFC6749].  This is
            REQUIRED unless only the implicit grant type is used.
        jwks_uri:
          type: string
          format: uri
          description: |
            URL of the authorization server's JWK Set
            document.  The referenced document contains the signing key(s) the
            client uses to validate signatures from the authorization server.
            This URL MUST use the "https" scheme.  The JWK Set MAY also
            contain the server's encryption key or keys, which are used by
            clients to encrypt requests to the server.  When both signing and
            encryption keys are made available, a "use" (public key use)
            parameter value is REQUIRED for all keys in the referenced JWK Set
            to indicate each key's intended usage.
        scopes_supported:
          type: array
          items:
            type: string
          description: >-
            JSON array containing a list of the OAuth 2.0 [RFC6749] "scope"
            values that this authorization server supports. Servers MAY choose
            not to advertise some supported scope values even when this
            parameter is used.
        response_types_supported:
          type: array
          items:
            type: string
            enum: [none]
          minItems: 0
          maxItems: 0
          description: >-
            JSON array containing a list of the OAuth 2.0 "response_type" values
            that this authorization server supports. These values are required
            for responses from calls to the authorization endpoint, thus this
            array may be empty if no grant flows use the authorization endpoint,
            thus this server returns an empty array. (definitions in RFC 7591)

            This field is required per RFC 8414, but this auth server does not
            support the flows that use this field, thus an empty array is returned.
        grant_types_supported:
          type: array
          items:
            type: string
            enum: [client_credentials]
          minItems: 1
          maxItems: 1
          description: >-
            JSON array containing a list of the OAuth 2.0 grant type values that
            this authorization server supports. (definitions in RFC 7591)
        token_endpoint_auth_methods_supported:
          type: array
          items:
            type: string
            enum: [private_key_jwt]
          minItems: 1
          maxItems: 1
          description: >-
            JSON array containing a list of client authentication methods
            supported by this token endpoint.  Client authentication method
            values are used in the "token_endpoint_auth_method" parameter
            defined in Section 2 of [RFC7591].  If omitted, the default is
            "client_secret_basic" -- the HTTP Basic Authentication Scheme
            specified in Section 2.3.1 of OAuth 2.0 [RFC6749]. FIMS-Authz will
            only support private_key_jwt.
        token_endpoint_auth_signing_alg_values_supported:
          type: array
          items:
            type: string
            enum: [HS256, RS256, ES256]
          minItems: 3
          maxItems: 3
          uniqueItems: true
          description: |-
            JSON array containing a list of the JWS signing algorithms (alg
            values) supported by the token endpoint for the signature on the JWT
            [JWT] used to authenticate the client at the token endpoint for the
            `private_key_jwt` and `client_secret_jwt` authentication methods.
            Servers SHOULD support "RS256". The value "none" MUST NOT be used.

            See UFAA doc for details.
        service_documentation:
          type: string
          format: url
          description: >-
            URL of a page containing human-readable information that developers
            might want or need to know when using the authorization server.  In
            particular, if the authorization server does not support Dynamic
            Client Registration, then information on how to register clients
            needs to be provided in this documentation.
        jwt_claims:
          $ref: "#/components/schemas/JwtClaimsSet"
        signed_metadata:
          type: string
          format: JWT
          description: |
            A JWT containing metadata values about the authorization server as
            claims.  This is a string value consisting of the entire signed
            JWT.  A "signed_metadata" metadata value SHOULD NOT appear as a
            claim in the JWT.

            Refer to RFC8414 - https://tools.ietf.org/html/rfc8414#section-2.1
    HttpErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Error Title"
        error_description:
          type: string
          example: "Human readable description of the error."
    JsonWebKeySet:
      type: "object"
      properties:
        keys:
          type: "array"
          items:
            $ref: "#/components/schemas/JsonWebKey"
    JsonWebKey:
      type: "object"
      description: >-
        This schema defines what a client may expect to receive when requesting  a JWK/JWKS.

        NOTE: Not all fields defined in this schema may be returned when in operational use.
      required:
        - kty
      properties:
        kty:
          type: "string"
        use:
          type: "string"
          enum:
            - sig
            - enc
        kid:
          type: "string"
        alg:
          type: "string"
        crv:
          type: "string"
        x:
          type: "string"
        "y":
          type: "string"
        d:
          type: "string"
        "n":
          type: "string"
        e:
          type: "string"
        k:
          type: "string"
